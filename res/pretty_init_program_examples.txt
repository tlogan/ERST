
<<<<<<<<
*** description ***
A program that defines some basic values.

*** grammar ***
expr ::= "let" "[a-zA-Z][_a-zA-Z]*" target ";" expr
       | base

target ::= ":" "T[0-9]+" "=" expr

base ::= "@"
       | "~" "[a-zA-Z][_a-zA-Z]*" base



*** program ***
let unit : T0 = @ ;
let true : T1 = ~true @ ;
let false : T2 = ~false @ ;
let zero : T3 = ~zero @ ;
let one : T4 = ~succ ~zero @ ;
let two : T5 = ~succ ~succ ~zero @ ;
@
>>>>>>>>
    

<<<<<<<<
*** description ***
A program that defines a function that takes a list and returns its length.

*** grammar ***
expr ::= "let" "[a-zA-Z][_a-zA-Z]*" target ";" expr
       | base
       | base argchain
       | "fix" "(" expr ")"

target ::= ":" "T[0-9]+" "=" expr

basepat ::= "~" "[a-zA-Z][_a-zA-Z]*" basepat
          | "@"
          | "(" pattern ")"
          | "[a-zA-Z][_a-zA-Z]*"

base ::= function
       | argchain
       | "[a-zA-Z][_a-zA-Z]*"
       | "@"
       | "~" "[a-zA-Z][_a-zA-Z]*" base

pattern ::= basepat "," pattern
          | basepat

argchain ::= "(" expr ")"

function ::= "case" pattern "=>" expr
           | "case" pattern "=>" expr function



*** program ***
let length : T0 = fix(case self => (
    case ~nil @ => ~zero @ 
    case ~cons (x, xs) => ~succ (self(xs)) 
)) ;
@
>>>>>>>>
    

<<<<<<<<
*** description ***
A program that defines addition.

*** grammar ***
expr ::= "let" "[a-zA-Z][_a-zA-Z]*" target ";" expr
       | base "," expr
       | base
       | base argchain
       | "fix" "(" expr ")"

target ::= ":" "T[0-9]+" "=" expr

basepat ::= "~" "[a-zA-Z][_a-zA-Z]*" basepat
          | "@"
          | "(" pattern ")"
          | "[a-zA-Z][_a-zA-Z]*"

base ::= function
       | argchain
       | "@"
       | "[a-zA-Z][_a-zA-Z]*"
       | "~" "[a-zA-Z][_a-zA-Z]*" base

pattern ::= basepat "," pattern
          | basepat

argchain ::= "(" expr ")"

function ::= "case" pattern "=>" expr
           | "case" pattern "=>" expr function



*** program ***
let add : T0 = fix (case self => ( 
    case (~zero @, n) => n 
    case (~succ m, n) => ~succ (self(m, n))
)) ;
@
>>>>>>>>
    
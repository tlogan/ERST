{"description": "A program that defines some basic values.", "grammar": "expr ::= \"let\" \"[a-zA-Z][_a-zA-Z]*\" target \"in\" expr\n       | base\n\nbase ::= \"@\"\n       | \"~\" \"[a-zA-Z][_a-zA-Z]*\" base\n\ntarget ::= \":\" \"T[0-9]+\" \"=\" expr", "program": "let unit : T0 = @ in\nlet true : T1 = ~true @ in\nlet false : T2 = ~false @ in\nlet zero : T3 = ~zero @ in\nlet one : T4 = ~succ ~zero @ in\nlet two : T5 = ~succ ~succ ~zero @ in\n@"}
{"description": "A program that defines a function that takes a list and returns its length.", "grammar": "base ::= function\n       | argchain\n       | \"@\"\n       | \"[a-zA-Z][_a-zA-Z]*\"\n       | \"~\" \"[a-zA-Z][_a-zA-Z]*\" base\n\nexpr ::= base argchain\n       | \"let\" \"[a-zA-Z][_a-zA-Z]*\" target \"in\" expr\n       | \"fix\" \"(\" expr \")\"\n       | base\n\ntarget ::= \":\" \"T[0-9]+\" \"=\" expr\n\nfunction ::= \"case\" pattern \"=>\" expr function\n           | \"case\" pattern \"=>\" expr\n\nbasepat ::= \"@\"\n          | \"~\" \"[a-zA-Z][_a-zA-Z]*\" basepat\n          | \"(\" pattern \")\"\n          | \"[a-zA-Z][_a-zA-Z]*\"\n\nargchain ::= \"(\" expr \")\"\n\npattern ::= basepat\n          | basepat \",\" pattern", "program": "let length : T0 = fix(case self => (\n    case ~nil @ => ~zero @ \n    case ~cons (x, xs) => ~succ (self(xs)) \n)) in\n@"}
{"description": "A program that defines a function that takes a boolean and a list and returns its length or the list paired with its length.", "grammar": "base ::= function\n       | argchain\n       | \"@\"\n       | \"[a-zA-Z][_a-zA-Z]*\"\n       | \"~\" \"[a-zA-Z][_a-zA-Z]*\" base\n\nexpr ::= base argchain\n       | \"if\" expr \"then\" expr \"else\" expr\n       | \"let\" \"[a-zA-Z][_a-zA-Z]*\" target \"in\" expr\n       | base \",\" expr\n       | \"fix\" \"(\" expr \")\"\n       | base\n\nargchain ::= \"(\" expr \")\" argchain\n           | \"(\" expr \")\"\n\ntarget ::= \":\" \"T[0-9]+\" \"=\" expr\n\nfunction ::= \"case\" pattern \"=>\" expr function\n           | \"case\" pattern \"=>\" expr\n\nbasepat ::= \"@\"\n          | \"~\" \"[a-zA-Z][_a-zA-Z]*\" basepat\n          | \"(\" pattern \")\"\n          | \"[a-zA-Z][_a-zA-Z]*\"\n\npattern ::= basepat\n          | basepat \",\" pattern", "program": "let length : T0 = fix(case self => (\n    case ~nil @ => ~zero @ \n    case ~cons (x, xs) => ~succ (self(xs)) \n)) in\nlet maybe_with_length : T1 = (case (b, l) => (\n    (if b then\n        ((length)(l), l)\n    else\n        (length)(l)\n    )\n)) in\n@"}
{"description": "A program that defines construction of a pair by calling two different functions on the same input.", "grammar": "base ::= function\n       | argchain\n       | \"@\"\n       | \"[a-zA-Z][_a-zA-Z]*\"\n\nargchain ::= \"(\" expr \")\" argchain\n           | \"(\" expr \")\"\n\ntarget ::= \":\" \"T[0-9]+\" \"=\" expr\n\nbasepat ::= recpat\n          | \"(\" pattern \")\"\n          | \"[a-zA-Z][_a-zA-Z]*\"\n\nexpr ::= \"let\" \"[a-zA-Z][_a-zA-Z]*\" target \"in\" expr\n       | base \",\" expr\n       | base\n\nfunction ::= \"case\" pattern \"=>\" expr\n\npattern ::= basepat\n\nrecpat ::= \";\" \"[a-zA-Z][_a-zA-Z]*\" \"=\" pattern", "program": "let f : T0 = (case (;uno = x) => x) in\nlet g : T1 = (case (;dos = x) => x) in\nlet make_pair : T2 = case x => (\n    ((f)(x), (g)(x))\n) in\n@"}
{"description": "A program that defines addition.", "grammar": "base ::= function\n       | argchain\n       | \"@\"\n       | \"[a-zA-Z][_a-zA-Z]*\"\n       | \"~\" \"[a-zA-Z][_a-zA-Z]*\" base\n\nexpr ::= base argchain\n       | \"let\" \"[a-zA-Z][_a-zA-Z]*\" target \"in\" expr\n       | base \",\" expr\n       | \"fix\" \"(\" expr \")\"\n       | base\n\ntarget ::= \":\" \"T[0-9]+\" \"=\" expr\n\nfunction ::= \"case\" pattern \"=>\" expr function\n           | \"case\" pattern \"=>\" expr\n\nbasepat ::= \"@\"\n          | \"~\" \"[a-zA-Z][_a-zA-Z]*\" basepat\n          | \"(\" pattern \")\"\n          | \"[a-zA-Z][_a-zA-Z]*\"\n\nargchain ::= \"(\" expr \")\"\n\npattern ::= basepat\n          | basepat \",\" pattern", "program": "let add : T0 = fix (case self => ( \n    case (~zero @, n) => n \n    case (~succ m, n) => ~succ (self(m, n))\n)) in\n@"}
{"description": "A program that defines less-than-or-equal of two numbers and maximum of two numbers.", "grammar": "base ::= function\n       | argchain\n       | \"@\"\n       | \"[a-zA-Z][_a-zA-Z]*\"\n       | \"~\" \"[a-zA-Z][_a-zA-Z]*\" base\n\nexpr ::= base argchain\n       | \"if\" expr \"then\" expr \"else\" expr\n       | \"let\" \"[a-zA-Z][_a-zA-Z]*\" target \"in\" expr\n       | base \",\" expr\n       | \"fix\" \"(\" expr \")\"\n       | base\n\nargchain ::= \"(\" expr \")\" argchain\n           | \"(\" expr \")\"\n\ntarget ::= \":\" \"T[0-9]+\" \"=\" expr\n\nfunction ::= \"case\" pattern \"=>\" expr function\n           | \"case\" pattern \"=>\" expr\n\nbasepat ::= \"@\"\n          | \"~\" \"[a-zA-Z][_a-zA-Z]*\" basepat\n          | \"(\" pattern \")\"\n          | \"[a-zA-Z][_a-zA-Z]*\"\n\npattern ::= basepat\n          | basepat \",\" pattern", "program": "let lte : T0 = fix(case self => (\n    case (~zero @, n) => ~true @ \n    case (~succ m, ~succ n) => self(m,n) \n    case (~succ m, ~zero @) => ~false @ \n)) in\nlet max : T1 = case (x, y) => (\n    if (lte)(x, y) then\n        y\n    else\n        x\n) in\n@"}
{"description": "A program that defines addition and multiplication.", "grammar": "base ::= function\n       | argchain\n       | \"@\"\n       | \"[a-zA-Z][_a-zA-Z]*\"\n       | \"~\" \"[a-zA-Z][_a-zA-Z]*\" base\n\nexpr ::= base argchain\n       | \"let\" \"[a-zA-Z][_a-zA-Z]*\" target \"in\" expr\n       | base \",\" expr\n       | \"fix\" \"(\" expr \")\"\n       | base\n\nargchain ::= \"(\" expr \")\" argchain\n           | \"(\" expr \")\"\n\ntarget ::= \":\" \"T[0-9]+\" \"=\" expr\n\nfunction ::= \"case\" pattern \"=>\" expr function\n           | \"case\" pattern \"=>\" expr\n\nbasepat ::= \"@\"\n          | \"~\" \"[a-zA-Z][_a-zA-Z]*\" basepat\n          | \"(\" pattern \")\"\n          | \"[a-zA-Z][_a-zA-Z]*\"\n\npattern ::= basepat\n          | basepat \",\" pattern", "program": "let add : T0 = fix (case self => ( \n    case (~zero @, n) => n \n    case (~succ m, n) => ~succ (self(m, n))\n)) in\nlet plus : T1 = add in\nlet mult : T2 = fix (case self => ( \n    case (~zero @, n) => ~zero \n    case (~succ m, n) => (add)(n, (self)(m, n))\n)) in\nlet times : T3 = fix (case self => ( \n    case (~zero @, n) => ~zero \n    case (~succ m, n) => (plus)(n, (self)(m, n))\n)) in\n@"}
{"description": "A program that defines addition, summation from left, and summation from right.", "grammar": "base ::= function\n       | argchain\n       | \"@\"\n       | \"[a-zA-Z][_a-zA-Z]*\"\n       | \"~\" \"[a-zA-Z][_a-zA-Z]*\" base\n\nexpr ::= base argchain\n       | \"let\" \"[a-zA-Z][_a-zA-Z]*\" target \"in\" expr\n       | base \",\" expr\n       | \"fix\" \"(\" expr \")\"\n       | base\n\nargchain ::= \"(\" expr \")\" argchain\n           | \"(\" expr \")\"\n\ntarget ::= \":\" \"T[0-9]+\" \"=\" expr\n\nfunction ::= \"case\" pattern \"=>\" expr function\n           | \"case\" pattern \"=>\" expr\n\nbasepat ::= \"@\"\n          | \"~\" \"[a-zA-Z][_a-zA-Z]*\" basepat\n          | \"(\" pattern \")\"\n          | \"[a-zA-Z][_a-zA-Z]*\"\n\npattern ::= basepat\n          | basepat \",\" pattern", "program": "let add : T0 = fix (case self => ( \n    case (~zero @, n) => n \n    case (~succ m, n) => ~succ (self(m, n))\n)) in\nlet suml : T1 = fix (case self => ( \n    case (~nil @, b) => b\n    case (~cons (x, xs), b) => self(xs, (add)(b, x))\n)) in\nlet sumr : T2 = fix (case self => ( \n    case (~nil @, b) => b\n    case (~cons (x, xs), b) => (add)((self)(xs, b), x)\n)) in\n@"}
{"description": "a program that defines the fibonacci sequence.", "grammar": "base ::= function\n       | argchain\n       | \"@\"\n       | \"[a-zA-Z][_a-zA-Z]*\"\n       | \"~\" \"[a-zA-Z][_a-zA-Z]*\" base\n\nexpr ::= base argchain\n       | \"let\" \"[a-zA-Z][_a-zA-Z]*\" target \"in\" expr\n       | base \",\" expr\n       | \"fix\" \"(\" expr \")\"\n       | base\n\nargchain ::= \"(\" expr \")\" argchain\n           | \"(\" expr \")\"\n\ntarget ::= \":\" \"T[0-9]+\" \"=\" expr\n\nfunction ::= \"case\" pattern \"=>\" expr function\n           | \"case\" pattern \"=>\" expr\n\nbasepat ::= \"@\"\n          | \"~\" \"[a-zA-Z][_a-zA-Z]*\" basepat\n          | \"(\" pattern \")\"\n          | \"[a-zA-Z][_a-zA-Z]*\"\n\npattern ::= basepat\n          | basepat \",\" pattern", "program": "let add : T0 = fix (case self => ( \n    case (~zero @, n) => n \n    case (~succ m, n) => ~succ (self(m, n))\n)) in\nlet fib : T1 = fix (case self => ( \n    case (~zero @) => ~zero @\n    case (~succ ~zero @) => ~succ ~zero @\n    case (~succ ~succ n) => (add)((self)(~succ n), (self)(n))\n)) in\n@"}
{"description": "a program that defines the factorial.", "grammar": "base ::= function\n       | argchain\n       | \"@\"\n       | \"[a-zA-Z][_a-zA-Z]*\"\n       | \"~\" \"[a-zA-Z][_a-zA-Z]*\" base\n\nexpr ::= base argchain\n       | \"let\" \"[a-zA-Z][_a-zA-Z]*\" target \"in\" expr\n       | base \",\" expr\n       | \"fix\" \"(\" expr \")\"\n       | base\n\nargchain ::= \"(\" expr \")\" argchain\n           | \"(\" expr \")\"\n\ntarget ::= \":\" \"T[0-9]+\" \"=\" expr\n\nfunction ::= \"case\" pattern \"=>\" expr function\n           | \"case\" pattern \"=>\" expr\n\nbasepat ::= \"@\"\n          | \"~\" \"[a-zA-Z][_a-zA-Z]*\" basepat\n          | \"(\" pattern \")\"\n          | \"[a-zA-Z][_a-zA-Z]*\"\n\npattern ::= basepat\n          | basepat \",\" pattern", "program": "let add : T0 = fix (case self => ( \n    case (~zero @, n) => n \n    case (~succ m, n) => ~succ (self(m, n))\n)) in\nlet mult : T1 = fix (case self => ( \n    case (~zero @, n) => ~zero \n    case (~succ m, n) => (add)(n, (self)(m, n))\n)) in\nlet fact : T2 = fix (case self => ( \n    case (~zero @) => ~succ ~zero @\n    case (~succ n) => (mult)((self)(n), ~succ n)\n)) in\n@"}
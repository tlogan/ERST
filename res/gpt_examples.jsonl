{"description": "A function that takes a list and returns its length", "program": "let foo : T1 =\nfix(case self => (\n    case ~nil @ => ~zero @ \n    case ~cons (x, xs) => ~succ (self(xs)) \n)) \n;\nfoo", "grammar": "expr ::= base argchain\n       | 'fix' '(' expr ')'\n       | 'let' '[a-zA-Z][_a-zA-Z]*' target '' expr\n       | base\n\nbase ::= '@'\n       | function\n       | '~' '[a-zA-Z][_a-zA-Z]*' base\n       | '[a-zA-Z][_a-zA-Z]*'\n       | argchain\n\nbasepat ::= '~' '[a-zA-Z][_a-zA-Z]*' basepat\n          | '@'\n          | '[a-zA-Z][_a-zA-Z]*'\n          | '(' pattern ')'\n\nfunction ::= 'case' pattern '=>' expr\n           | 'case' pattern '=>' expr function\n\nargchain ::= '(' expr ')'\n\ntarget ::= ':' 'T[0-9]+' '=' expr\n\npattern ::= basepat\n          | basepat ',' pattern\n\n"}
{"description": "A function that takes a list of numbers and returns a new list with each number doubled", "program": "let doubleList : T1 =\nfix(case self => (\n    case ~nil @ => ~nil @ \n    case ~cons (x, xs) => ~cons (x * 2, self(xs)) \n)) \n;\ndoubleList", "grammar": "expr ::= base argchain\n       | 'fix' '(' expr ')'\n       | 'let' '[a-zA-Z][_a-zA-Z]*' target '' expr\n       | base\n\nbase ::= '@'\n       | function\n       | '~' '[a-zA-Z][_a-zA-Z]*' base\n       | '[a-zA-Z][_a-zA-Z]*'\n       | argchain\n\nbasepat ::= '~' '[a-zA-Z][_a-zA-Z]*' basepat\n          | '@'\n          | '[a-zA-Z][_a-zA-Z]*'\n          | '(' pattern ')'\n\nfunction ::= 'case' pattern '=>' expr\n           | 'case' pattern '=>' expr function\n\nargchain ::= '(' expr ')'\n\ntarget ::= ':' 'T[0-9]+' '=' expr\n\npattern ::= basepat\n          | basepat ',' pattern\n\n"}
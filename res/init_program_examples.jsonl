{"description": "A program that defines some basic values.", "grammar": "expr ::= base\n       | \"let\" \"[a-zA-Z][_a-zA-Z]*\" target \";\" expr\n\nbase ::= \"@\"\n       | \"~\" \"[a-zA-Z][_a-zA-Z]*\" base\n\ntarget ::= \":\" \"T[0-9]+\" \"=\" expr\n\n", "program": "let unit : T0 = @ ;\nlet true : T1 = ~true @ ;\nlet false : T2 = ~false @ ;\nlet zero : T3 = ~zero @ ;\nlet one : T4 = ~succ ~zero @ ;\nlet two : T5 = ~succ ~succ ~zero @ ;\n@"}
{"description": "A program that defines a function that takes a list and returns its length.", "grammar": "expr ::= base\n       | base argchain\n       | \"fix\" \"(\" expr \")\"\n       | \"let\" \"[a-zA-Z][_a-zA-Z]*\" target \";\" expr\n\nbasepat ::= \"~\" \"[a-zA-Z][_a-zA-Z]*\" basepat\n          | \"@\"\n          | \"(\" pattern \")\"\n          | \"[a-zA-Z][_a-zA-Z]*\"\n\nfunction ::= \"case\" pattern \"=>\" expr function\n           | \"case\" pattern \"=>\" expr\n\npattern ::= basepat \",\" pattern\n          | basepat\n\nbase ::= function\n       | \"@\"\n       | \"~\" \"[a-zA-Z][_a-zA-Z]*\" base\n       | \"[a-zA-Z][_a-zA-Z]*\"\n       | argchain\n\nargchain ::= \"(\" expr \")\"\n\ntarget ::= \":\" \"T[0-9]+\" \"=\" expr\n\n", "program": "let length : T0 = fix(case self => (\n    case ~nil @ => ~zero @ \n    case ~cons (x, xs) => ~succ (self(xs)) \n)) ;\n@"}
{"description": "A program that defines addition.", "grammar": "expr ::= base\n       | base argchain\n       | \"fix\" \"(\" expr \")\"\n       | \"let\" \"[a-zA-Z][_a-zA-Z]*\" target \";\" expr\n       | base \",\" expr\n\nbasepat ::= \"~\" \"[a-zA-Z][_a-zA-Z]*\" basepat\n          | \"@\"\n          | \"(\" pattern \")\"\n          | \"[a-zA-Z][_a-zA-Z]*\"\n\nfunction ::= \"case\" pattern \"=>\" expr function\n           | \"case\" pattern \"=>\" expr\n\npattern ::= basepat \",\" pattern\n          | basepat\n\nbase ::= function\n       | \"@\"\n       | \"~\" \"[a-zA-Z][_a-zA-Z]*\" base\n       | \"[a-zA-Z][_a-zA-Z]*\"\n       | argchain\n\nargchain ::= \"(\" expr \")\"\n\ntarget ::= \":\" \"T[0-9]+\" \"=\" expr\n\n", "program": "let add : T0 = fix (case self => ( \n    case (~zero @, n) => n \n    case (~succ m, n) => ~succ (self(m, n))\n)) ;\n@"}
{"description": "A program that defines less-than-or-equal of two numbers and maximum of two numbers.", "grammar": "expr ::= base\n       | base argchain\n       | \"fix\" \"(\" expr \")\"\n       | \"let\" \"[a-zA-Z][_a-zA-Z]*\" target \";\" expr\n       | \"if\" expr \"then\" expr \"else\" expr\n       | base \",\" expr\n\nbasepat ::= \"~\" \"[a-zA-Z][_a-zA-Z]*\" basepat\n          | \"@\"\n          | \"(\" pattern \")\"\n          | \"[a-zA-Z][_a-zA-Z]*\"\n\nfunction ::= \"case\" pattern \"=>\" expr function\n           | \"case\" pattern \"=>\" expr\n\npattern ::= basepat \",\" pattern\n          | basepat\n\nbase ::= function\n       | \"@\"\n       | \"~\" \"[a-zA-Z][_a-zA-Z]*\" base\n       | \"[a-zA-Z][_a-zA-Z]*\"\n       | argchain\n\nargchain ::= \"(\" expr \")\"\n           | \"(\" expr \")\" argchain\n\ntarget ::= \":\" \"T[0-9]+\" \"=\" expr\n\n", "program": "let lte : T0 = fix(case self => (\n    case (~zero @, n) => ~true @ \n    case (~succ m, ~succ n) => self(m,n) \n    case (~succ m, ~zero @) => ~false @ \n)) ;\nlet max : T1 = case (x, y) => (\n    if (lte)(x, y) then\n        y\n    else\n        x\n) ;\n@"}
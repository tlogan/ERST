**********************************************
<<<description>>> 
A program that defines some basic values.

<<<grammar>>>
expr ::= "let" "[a-zA-Z][_a-zA-Z]*" target "in" expr
       | base

base ::= "@"
       | "~" "[a-zA-Z][_a-zA-Z]*" base

target ::= ":" "T[0-9]+" "=" expr



<<<program>>>
let unit : T0 = @ in
let true : T1 = ~true @ in
let false : T2 = ~false @ in
let zero : T3 = ~zero @ in
let one : T4 = ~succ ~zero @ in
let two : T5 = ~succ ~succ ~zero @ in
@
**********************************************
<<<description>>> 
A program that defines a function that takes a list and returns its length.

<<<grammar>>>
base ::= function
       | argchain
       | "@"
       | "[a-zA-Z][_a-zA-Z]*"
       | "~" "[a-zA-Z][_a-zA-Z]*" base

expr ::= base argchain
       | "let" "[a-zA-Z][_a-zA-Z]*" target "in" expr
       | "fix" "(" expr ")"
       | base

target ::= ":" "T[0-9]+" "=" expr

function ::= "case" pattern "=>" expr function
           | "case" pattern "=>" expr

basepat ::= "@"
          | "~" "[a-zA-Z][_a-zA-Z]*" basepat
          | "(" pattern ")"
          | "[a-zA-Z][_a-zA-Z]*"

argchain ::= "(" expr ")"

pattern ::= basepat
          | basepat "," pattern



<<<program>>>
let length : T0 = fix(case self => (
    case ~nil @ => ~zero @ 
    case ~cons (x, xs) => ~succ (self(xs)) 
)) in
@
**********************************************
<<<description>>> 
A program that defines a function that takes a boolean and a list and returns its length or the list paired with its length.

<<<grammar>>>
base ::= function
       | argchain
       | "@"
       | "[a-zA-Z][_a-zA-Z]*"
       | "~" "[a-zA-Z][_a-zA-Z]*" base

expr ::= base argchain
       | "if" expr "then" expr "else" expr
       | "let" "[a-zA-Z][_a-zA-Z]*" target "in" expr
       | base "," expr
       | "fix" "(" expr ")"
       | base

argchain ::= "(" expr ")" argchain
           | "(" expr ")"

target ::= ":" "T[0-9]+" "=" expr

function ::= "case" pattern "=>" expr function
           | "case" pattern "=>" expr

basepat ::= "@"
          | "~" "[a-zA-Z][_a-zA-Z]*" basepat
          | "(" pattern ")"
          | "[a-zA-Z][_a-zA-Z]*"

pattern ::= basepat
          | basepat "," pattern



<<<program>>>
let length : T0 = fix(case self => (
    case ~nil @ => ~zero @ 
    case ~cons (x, xs) => ~succ (self(xs)) 
)) in
let maybe_with_length : T1 = (case (b, l) => (
    (if b then
        ((length)(l), l)
    else
        (length)(l)
    )
)) in
@
**********************************************
<<<description>>> 
A program that defines construction of a pair by calling two different functions on the same input.

<<<grammar>>>
base ::= function
       | argchain
       | "@"
       | "[a-zA-Z][_a-zA-Z]*"

argchain ::= "(" expr ")" argchain
           | "(" expr ")"

target ::= ":" "T[0-9]+" "=" expr

basepat ::= recpat
          | "(" pattern ")"
          | "[a-zA-Z][_a-zA-Z]*"

expr ::= "let" "[a-zA-Z][_a-zA-Z]*" target "in" expr
       | base "," expr
       | base

function ::= "case" pattern "=>" expr

pattern ::= basepat

recpat ::= ";" "[a-zA-Z][_a-zA-Z]*" "=" pattern



<<<program>>>
let f : T0 = (case (;uno = x) => x) in
let g : T1 = (case (;dos = x) => x) in
let make_pair : T2 = case x => (
    ((f)(x), (g)(x))
) in
@
**********************************************
<<<description>>> 
A program that defines addition.

<<<grammar>>>
base ::= function
       | argchain
       | "@"
       | "[a-zA-Z][_a-zA-Z]*"
       | "~" "[a-zA-Z][_a-zA-Z]*" base

expr ::= base argchain
       | "let" "[a-zA-Z][_a-zA-Z]*" target "in" expr
       | base "," expr
       | "fix" "(" expr ")"
       | base

target ::= ":" "T[0-9]+" "=" expr

function ::= "case" pattern "=>" expr function
           | "case" pattern "=>" expr

basepat ::= "@"
          | "~" "[a-zA-Z][_a-zA-Z]*" basepat
          | "(" pattern ")"
          | "[a-zA-Z][_a-zA-Z]*"

argchain ::= "(" expr ")"

pattern ::= basepat
          | basepat "," pattern



<<<program>>>
let add : T0 = fix (case self => ( 
    case (~zero @, n) => n 
    case (~succ m, n) => ~succ (self(m, n))
)) in
@
**********************************************
<<<description>>> 
A program that defines less-than-or-equal of two numbers and maximum of two numbers.

<<<grammar>>>
base ::= function
       | argchain
       | "@"
       | "[a-zA-Z][_a-zA-Z]*"
       | "~" "[a-zA-Z][_a-zA-Z]*" base

expr ::= base argchain
       | "if" expr "then" expr "else" expr
       | "let" "[a-zA-Z][_a-zA-Z]*" target "in" expr
       | base "," expr
       | "fix" "(" expr ")"
       | base

argchain ::= "(" expr ")" argchain
           | "(" expr ")"

target ::= ":" "T[0-9]+" "=" expr

function ::= "case" pattern "=>" expr function
           | "case" pattern "=>" expr

basepat ::= "@"
          | "~" "[a-zA-Z][_a-zA-Z]*" basepat
          | "(" pattern ")"
          | "[a-zA-Z][_a-zA-Z]*"

pattern ::= basepat
          | basepat "," pattern



<<<program>>>
let lte : T0 = fix(case self => (
    case (~zero @, n) => ~true @ 
    case (~succ m, ~succ n) => self(m,n) 
    case (~succ m, ~zero @) => ~false @ 
)) in
let max : T1 = case (x, y) => (
    if (lte)(x, y) then
        y
    else
        x
) in
@
**********************************************
<<<description>>> 
A program that defines addition and multiplication.

<<<grammar>>>
base ::= function
       | argchain
       | "@"
       | "[a-zA-Z][_a-zA-Z]*"
       | "~" "[a-zA-Z][_a-zA-Z]*" base

expr ::= base argchain
       | "let" "[a-zA-Z][_a-zA-Z]*" target "in" expr
       | base "," expr
       | "fix" "(" expr ")"
       | base

argchain ::= "(" expr ")" argchain
           | "(" expr ")"

target ::= ":" "T[0-9]+" "=" expr

function ::= "case" pattern "=>" expr function
           | "case" pattern "=>" expr

basepat ::= "@"
          | "~" "[a-zA-Z][_a-zA-Z]*" basepat
          | "(" pattern ")"
          | "[a-zA-Z][_a-zA-Z]*"

pattern ::= basepat
          | basepat "," pattern



<<<program>>>
let add : T0 = fix (case self => ( 
    case (~zero @, n) => n 
    case (~succ m, n) => ~succ (self(m, n))
)) in
let plus : T1 = add in
let mult : T2 = fix (case self => ( 
    case (~zero @, n) => ~zero 
    case (~succ m, n) => (add)(n, (self)(m, n))
)) in
let times : T3 = fix (case self => ( 
    case (~zero @, n) => ~zero 
    case (~succ m, n) => (plus)(n, (self)(m, n))
)) in
@
**********************************************
<<<description>>> 
A program that defines addition, summation from left, and summation from right.

<<<grammar>>>
base ::= function
       | argchain
       | "@"
       | "[a-zA-Z][_a-zA-Z]*"
       | "~" "[a-zA-Z][_a-zA-Z]*" base

expr ::= base argchain
       | "let" "[a-zA-Z][_a-zA-Z]*" target "in" expr
       | base "," expr
       | "fix" "(" expr ")"
       | base

argchain ::= "(" expr ")" argchain
           | "(" expr ")"

target ::= ":" "T[0-9]+" "=" expr

function ::= "case" pattern "=>" expr function
           | "case" pattern "=>" expr

basepat ::= "@"
          | "~" "[a-zA-Z][_a-zA-Z]*" basepat
          | "(" pattern ")"
          | "[a-zA-Z][_a-zA-Z]*"

pattern ::= basepat
          | basepat "," pattern



<<<program>>>
let add : T0 = fix (case self => ( 
    case (~zero @, n) => n 
    case (~succ m, n) => ~succ (self(m, n))
)) in
let suml : T1 = fix (case self => ( 
    case (~nil @, b) => b
    case (~cons (x, xs), b) => self(xs, (add)(b, x))
)) in
let sumr : T2 = fix (case self => ( 
    case (~nil @, b) => b
    case (~cons (x, xs), b) => (add)((self)(xs, b), x)
)) in
@
**********************************************
<<<description>>> 
a program that defines the fibonacci sequence.

<<<grammar>>>
base ::= function
       | argchain
       | "@"
       | "[a-zA-Z][_a-zA-Z]*"
       | "~" "[a-zA-Z][_a-zA-Z]*" base

expr ::= base argchain
       | "let" "[a-zA-Z][_a-zA-Z]*" target "in" expr
       | base "," expr
       | "fix" "(" expr ")"
       | base

argchain ::= "(" expr ")" argchain
           | "(" expr ")"

target ::= ":" "T[0-9]+" "=" expr

function ::= "case" pattern "=>" expr function
           | "case" pattern "=>" expr

basepat ::= "@"
          | "~" "[a-zA-Z][_a-zA-Z]*" basepat
          | "(" pattern ")"
          | "[a-zA-Z][_a-zA-Z]*"

pattern ::= basepat
          | basepat "," pattern



<<<program>>>
let add : T0 = fix (case self => ( 
    case (~zero @, n) => n 
    case (~succ m, n) => ~succ (self(m, n))
)) in
let fib : T1 = fix (case self => ( 
    case (~zero @) => ~zero @
    case (~succ ~zero @) => ~succ ~zero @
    case (~succ ~succ n) => (add)((self)(~succ n), (self)(n))
)) in
@
**********************************************
<<<description>>> 
a program that defines the factorial.

<<<grammar>>>
base ::= function
       | argchain
       | "@"
       | "[a-zA-Z][_a-zA-Z]*"
       | "~" "[a-zA-Z][_a-zA-Z]*" base

expr ::= base argchain
       | "let" "[a-zA-Z][_a-zA-Z]*" target "in" expr
       | base "," expr
       | "fix" "(" expr ")"
       | base

argchain ::= "(" expr ")" argchain
           | "(" expr ")"

target ::= ":" "T[0-9]+" "=" expr

function ::= "case" pattern "=>" expr function
           | "case" pattern "=>" expr

basepat ::= "@"
          | "~" "[a-zA-Z][_a-zA-Z]*" basepat
          | "(" pattern ")"
          | "[a-zA-Z][_a-zA-Z]*"

pattern ::= basepat
          | basepat "," pattern



<<<program>>>
let add : T0 = fix (case self => ( 
    case (~zero @, n) => n 
    case (~succ m, n) => ~succ (self(m, n))
)) in
let mult : T1 = fix (case self => ( 
    case (~zero @, n) => ~zero 
    case (~succ m, n) => (add)(n, (self)(m, n))
)) in
let fact : T2 = fix (case self => ( 
    case (~zero @) => ~succ ~zero @
    case (~succ n) => (mult)((self)(n), ~succ n)
)) in
@
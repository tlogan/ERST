# THIS FILE IS AUTOGENERATED
# CHANGES MAY BE LOST



from __future__ import annotations

from dataclasses import dataclass
from typing import Dict, TypeVar, Any, Generic, Union, Optional
from collections.abc import Callable

from abc import ABC, abstractmethod

T = TypeVar('T')


@dataclass(frozen=True, eq=True)
class SourceFlag: 
    pass





# type Typ
@dataclass(frozen=True, eq=True)
class Typ(ABC):
    @abstractmethod
    def match(self, handler : TypHandler[T]) -> T:
        pass

# constructors for type Typ

@dataclass(frozen=True, eq=True)
class Var(Typ):
    name : str

    def match(self, handler : TypHandler[T]) -> T:
        return handler.case_Var(self)

def make_Var(
    name : str
) -> Typ:
    return Var(
        name
    )

def update_Var(source_Var : Var,
    name : Union[str, SourceFlag] = SourceFlag()
) -> Var:
    return Var(
        source_Var.name if isinstance(name, SourceFlag) else name
    )

        

@dataclass(frozen=True, eq=True)
class Exis(Typ):
    body : Typ
    qualifiers : ListQual
    indicies : ListIdent

    def match(self, handler : TypHandler[T]) -> T:
        return handler.case_Exis(self)

def make_Exis(
    body : Typ, 
    qualifiers : ListQual, 
    indicies : ListIdent
) -> Typ:
    return Exis(
        body,
        qualifiers,
        indicies
    )

def update_Exis(source_Exis : Exis,
    body : Union[Typ, SourceFlag] = SourceFlag(),
    qualifiers : Union[ListQual, SourceFlag] = SourceFlag(),
    indicies : Union[ListIdent, SourceFlag] = SourceFlag()
) -> Exis:
    return Exis(
        source_Exis.body if isinstance(body, SourceFlag) else body,
        source_Exis.qualifiers if isinstance(qualifiers, SourceFlag) else qualifiers,
        source_Exis.indicies if isinstance(indicies, SourceFlag) else indicies
    )

        

# case handler for type Typ
class TypHandler(ABC, Generic[T]):
    @abstractmethod
    def case_Var(self, o : Var) -> T :
        pass
    @abstractmethod
    def case_Exis(self, o : Exis) -> T :
        pass

     

 
    
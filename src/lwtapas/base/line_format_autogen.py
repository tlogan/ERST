# THIS FILE IS AUTOGENERATED
# CHANGES MAY BE LOST



from __future__ import annotations

from dataclasses import dataclass
from typing import Dict, TypeVar, Any, Generic, Union, Optional
from collections.abc import Callable

from abc import ABC, abstractmethod

T = TypeVar('T')


@dataclass(frozen=True, eq=True)
class SourceFlag: 
    pass





# type LineFormat
@dataclass(frozen=True, eq=True)
class LineFormat(ABC):
    @abstractmethod
    def match(self, handler : LineFormatHandler[T]) -> T:
        pass

# constructors for type LineFormat

@dataclass(frozen=True, eq=True)
class InLine(LineFormat):


    def match(self, handler : LineFormatHandler[T]) -> T:
        return handler.case_InLine(self)

def make_InLine(
) -> LineFormat:
    return InLine(
    )

def update_InLine(source_InLine : InLine
) -> InLine:
    return InLine(
    )

        

@dataclass(frozen=True, eq=True)
class NewLine(LineFormat):


    def match(self, handler : LineFormatHandler[T]) -> T:
        return handler.case_NewLine(self)

def make_NewLine(
) -> LineFormat:
    return NewLine(
    )

def update_NewLine(source_NewLine : NewLine
) -> NewLine:
    return NewLine(
    )

        

@dataclass(frozen=True, eq=True)
class IndentLine(LineFormat):


    def match(self, handler : LineFormatHandler[T]) -> T:
        return handler.case_IndentLine(self)

def make_IndentLine(
) -> LineFormat:
    return IndentLine(
    )

def update_IndentLine(source_IndentLine : IndentLine
) -> IndentLine:
    return IndentLine(
    )

        

# case handler for type LineFormat
class LineFormatHandler(ABC, Generic[T]):
    @abstractmethod
    def case_InLine(self, o : InLine) -> T :
        pass
    @abstractmethod
    def case_NewLine(self, o : NewLine) -> T :
        pass
    @abstractmethod
    def case_IndentLine(self, o : IndentLine) -> T :
        pass

     

 
    